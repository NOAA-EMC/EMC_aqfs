#!/bin/ksh 
#####################################################################
#  UNIX Script Documentation Block
#                      .
# Script name:         exaqm_premaq.sh
# Script description:  Run premaq emissions processing for CMAQ
#
# Author:      Marina Tsidulko and Pius Lee Org: NP22 Date: 2004-03-31
#
# Abstract: This script runs premaq emissions processing
#
# Script history log:
# 2003-07-03    Marina Tsidulko, initial version
# 2003-07-15    Julia Zhu, modified for production  
# 2004-03-31    Pius Lee, netcdf independence and gfs ozone blending
# 2017-02-18    Jianping Huang, modified fori cmaq v5.0.2 on Cray 
#####################################################################
set -xa

msg="JOB $job HAS BEGUN"
postmsg "$jlogfile" "$msg"

export pgm=aqm_premaq

cd $DATA

#---------------------------------------------------------------------
## Environmental variable for PREMAQ
#---------------------------------------------------------------------
export AKHI_RUN=T
export PX_RA=F        # If F => use NAM calculated aerodynamic resistance
                        # T => use Pleim calculated Ra using NAM parameters
export PBL_MIN50=T
export IGBP_4_USGS=F  # False for AK and HI
export VERT_INTERP=T  # vertical interpolation
export MIXHT_4_PBL=F

if [[ $PX_RA = "T" ]]; then
  CANOPY_H=$FIXaqm/aqm_canopy_height_CONUS.ncf
 if [[ -f ${CANOPY_H} && -s ${CANOPY_H} ]]; then
    export CANOPY_IN=${CANOPY_H}
 else
    print Could not find input canopy height file, ${CANOPY_H}
    exit 111
 fi
fi
#---------------------------------------------------------------------
## Specify the input pollutant data directory:
#if [ ${cycle} = 't00z' -o ${cycle} = 't06z' ]; then
#   yyyy=`echo $PDYm1 |cut -c1-4`
#   year_month=`echo $PDYm1 |cut -c1-6`
#elif [ ${cycle} = 't12z' -o ${cycle} = 't18z' ]; then
   yyyy=`echo $PDY |cut -c1-4`
   year_month=`echo $PDY |cut -c1-6`
#fi

#------------------ names for tests ----------------
INPPLTDRY=$INPEMIDIR/$yyyy
INPPLTDR=$INPEMIDIR/${year_month}
#---------------------------------------------------
job="PREMAQ HI"
INGRID=139
NLAYS=35 #42 #22      # '22' (collapse from 60), '60' (full nmm level)
OUTGRID=HI # 'NEUS' (Northeast), 'EASTUS' (3x), or 'CONUS' (5x)
EXPT=invert
DDATE=01May
PROG=premaq
export MOBILE_PREMAQ_VERSION=2005
export BINIO=F      # binary I/O?
MKGRID=T     # make GRID files?
MKEMIS=T     # make emissions file?
MKBC=F       # make time-varying BCs?
MBL_T=F      # If T => use Temperature dependent scheme for Mobile Em
             #    F => No temperature dependence 
             #      if F also must comment out line 494 "echo 'MGTS_L'
GAS_CHEM=cb05 # select from   ( cb4, cb05)
INV_BS=2005aa # select from   (2005aa)

typeset -u OUTGRID=$OUTGRID

export fhr=00
export soilhr=06   ##06 for operational run
let "soilhr=soilhr+1"

case $cyc in 
 00) export endfhr=06
     export endday=$PDY
     export soil_input=$COMINm1/aqm.t18z.soil06.ncf;;
 06) export endfhr=48
     export endday=$PDYp2
     export soil_input=$COMIN/aqm.t00z.soil06.ncf;;
 12) export endfhr=48 #24
     export endday=$PDYp2 #$PDYp1
     export soil_input=$COMIN/aqm.t06z.soil06.ncf;;
 18) export endfhr=06
     export endday=$PDYp1
     export soil_input=$COMIN/aqm.t12z.soil06.ncf;;
esac

let "endcyc=cyc+endfhr"
while [ $endcyc -ge 24 ]; do
  let "endcyc=endcyc-24"
done
typeset -Z2 endcyc
echo $endcyc 

#--------------------------------------------------------
ic=1
  while [ $ic -lt 300 ]
  do
    if [ -s $COMIN/aqm.${cycle}.nmm${endfhr}.tm00 ]
    then
      echo "PREPHYB outoupts are available"
    break
    else
          let "ic=ic+1"
          sleep 10
      fi

      if [ $ic -ge 180 ]
      then
      err_exit "****FATAL ERROR*** - COULD NOT LOCATE:$COMIN/aqm.${cycle}.nmm${endfhr}.tm00"
      fi
   done
#-------------------------------------------------------

if [ -s $soil_input ]; then
   echo "=====>  The Previous Cycle Ran Successfully"
   export START=WARM
   export INITIAL_RUN=N
else
   export START=COLD
   export INITIAL_RUN=Y
fi

if [ $INITIAL_RUN = "N" ]; then
   echo 'INITIAL_RUN = ' $INITIAL_RUN
   ln -s $soil_input soilinp.$PDY.${OUTGRID}.ncf
else
   echo 'INITIAL_RUN = ' $INITIAL_RUN
fi

while [ $fhr -le $endfhr ]; do
  #XXW ln -s $COMNAM/aqm.${cycle}.nmm${fhr}.tm00  $DATA/.
  ln -s $COMIN/aqm.${cycle}.nmm${fhr}.tm00  $DATA/.
  let "fhr=fhr+1"
  typeset -Z2 fhr
done

SYYYY=`echo $PDY |cut -c1-4`
SMM=`echo $PDY |cut -c5-6`
SDD=`echo $PDY |cut -c7-8`
EYYYY=`echo $endday |cut -c1-4`
EMM=`echo $endday |cut -c5-6`
EDD=`echo $endday |cut -c7-8`

if [[ $OUTGRID = 'NEUS' ]]; then
  CoordName=AQF_LamCon_12      # 16-character maximum
  GridName=AQF_Northeast_US    # 16-character maximum
  BTRIM=0
  X0=1
  Y0=1
  NCOLS=20
  NROWS=20
elif [[ $OUTGRID = 'EASTUS' ]]; then
  CoordName=AQF_RPO            # 16-character maximum
  GridName=AQF_East_US         # 16-character maximum
  BTRIM=-1
  X0=199
  Y0=1
  NCOLS=268
  NROWS=259
  LPRT_COL=0
  LPRT_ROW=0  
elif [[ $OUTGRID = 'CONUS' ]]; then
  CoordName=AQF_RPO            # 16-character maximum
  GridName=AQF_CONUS           # 16-character maximum
  BTRIM=-1
  X0=25
  Y0=1
  NCOLS=442
  NROWS=265
  LPRT_COL=0
  LPRT_ROW=0
  VGTOP_GD=200.0             # P of top (=mb*100)
elif [[ $OUTGRID = 'HI' ]]; then
  CoordName=AQF_RPO            # 16-character maximum
  GridName=AQF_HI              # 16-character maximum
  BTRIM=-1
  X0=1
 Y0=1
  NCOLS=80
  NROWS=52
#  NCOLS=78
# NROWS=50
  LPRT_COL=0
  LPRT_ROW=0
  VGTOP_GD=200.0             # P of top (=mb*100)
elif [[ $OUTGRID = 'AK' ]]; then
  CoordName=AQF_RPO            # 16-character maximum
  GridName=AQF_AK              # 16-character maximum
  BTRIM=-1
  X0=1
  Y0=1
  NCOLS=199
  NROWS=163
  LPRT_COL=0
  LPRT_ROW=0
  VGTOP_GD=200.0             # P of top (=mb*100)
else
  print Unexpected output grid specified
  print OUTGRID is $OUTGRID
  exit 111
fi

EQSIGMA=" 1.000000, 0.995253, 0.990479, 0.985679, 0.980781, \
          0.975782, 0.970684, 0.965486, 0.960187, 0.954689, \
          0.948991, 0.943093, 0.936895, 0.930397, 0.923599, \
          0.916402, 0.908404, 0.899507, 0.888811, 0.876814, \
          0.862914, 0.847114, 0.829314, 0.809114, 0.786714, \
          0.762114, 0.735314, 0.706714, 0.676614, 0.645814, \
          0.614214, 0.582114, 0.549714, 0.517114, 0.484394, \
          0.451894, 0.419694, 0.388094, 0.356994, 0.326694, \
          0.297694, 0.270694, 0.245894, 0.223694, 0.203594, \
          0.185494, 0.169294, 0.154394, 0.140494, 0.127094, \
          0.114294, 0.101894, 0.089794, 0.078094, 0.066594, \
          0.055294, 0.044144, 0.033054, 0.022004, 0.010994, \
          0.000000"

if [ $NLAYS = 22 ]; then
   CTMLAYS="  1.000000, 0.995253, 0.990479, 0.985679, 0.980781, \
              0.970684, 0.960187, 0.948991, 0.936895, 0.923599, \
              0.908404, 0.876814, 0.829314, 0.762114, 0.676614, \
              0.582114, 0.484394, 0.388094, 0.270694, 0.223694, \
              0.169294, 0.127094, 0.089794"
elif [ $NLAYS = 33 ]; then
   CTMLAYS="  1.000000, 0.995253, 0.990479, 0.985679, 0.980781, \
              0.975782, 0.970684, 0.960187, 0.954689, 0.936895, \
	      0.930397, 0.908404, 0.888811, 0.862914, 0.829314, \
              0.786714, 0.735314, 0.645814, 0.582114, 0.549714, \
              0.511711, 0.484394, 0.451894, 0.419694, 0.388094, \
              0.356994, 0.326694, 0.297694, 0.270694, 0.245894, \
	      0.223694, 0.154394, 0.127094, 0.089794"	
elif [ $NLAYS = 35 ]; then
   CTMLAYS="  1.000000, 0.995253, 0.990479, 0.985679, 0.980781, \
              0.975782, 0.970684, 0.960187, 0.954689, 0.936895, \
	      0.930397, 0.908404, 0.888811, 0.862914, 0.829314, \
              0.786714, 0.735314, 0.645814, 0.614214, 0.582114, \
              0.549714, 0.511711, 0.484394, 0.451894, 0.419694, \
              0.388094, 0.356994, 0.326694, 0.297694, 0.270694, \
	      0.245894, 0.223694, 0.203594, 0.154394, 0.127094, \
	      0.089794"		            	      
elif [ $NLAYS = 42 ]; then	
   CTMLAYS="  1.000000, 0.995253, 0.990479, 0.985679, 0.980781, \
              0.975782, 0.970684, 0.965486, 0.960187, 0.954689, \
              0.948991, 0.943093, 0.936895, 0.930397, 0.923599, \
              0.916402, 0.908404, 0.899507, 0.888811, 0.876814, \
              0.862914, 0.847114, 0.829314, 0.809114, 0.786714, \
              0.762114, 0.735314, 0.676614, 0.614214, 0.549714, \
	      0.484394, 0.419694, 0.356994, 0.297694, 0.245894, \
	      0.203594, 0.169294, 0.140494, 0.114294, 0.089794, \
              0.066594, 0.044144, 0.022004"
else
   print Unexpected ctmlay layers specified
   print NLAYS is $NLAYS
   exit 111
fi

#-------------------------------------------------------------------

export fhr=00

while [ $fhr -le $endfhr ]; do
fcsthrs[$fhr]=$fhr
#InMetFiles[$fhr]=$DATA/meso.AQFNAM$fhr
InMetFiles[$fhr]=./meso.AQFNAM$fhr
let "fhr=fhr+1"
typeset -Z2 fhr
done

for fhr in ${fcsthrs[*]}; do
   ln -s -f $DATA/aqm.${cycle}.nmm$fhr.tm00 meso.AQFNAM$fhr
done

AQF_START=${SYYYY}-${SMM}-${SDD}-${cyc}:00:00.0000
AQF_END=${EYYYY}-${EMM}-${EDD}-${endcyc}:00:00.0000

#-------------------------------------------------------------------
#  varilables of the namelist "userdefs"
#-------------------------------------------------------------------

NETA1=20
IWIND=0           # way of vertical wind correction (top-down or bottom-up)
METVERT=1
INTVL=60

set -A InMM ${InMetFiles[*]}
FILE_GD=$DATA/GRIDDESC

#--------------------------------------------------------------------
# namelist with user definitions.
#--------------------------------------------------------------------
if [ -f $DATA/files_list ]; then
  rm $DATA/files_list
fi

export fhr=00
while [ $fhr -le $endfhr ]; do
echo "\"${InMetFiles[$fhr]}\"," >> $DATA/files_list

idx_file=${InMetFiles[$fhr]}.indx
if [ ! -s ${idx_file} ]; then
 $GRB2INDEX ${InMetFiles[$fhr]} ${idx_file}
fi

echo "\"${idx_file}\"," >> index_list

let "fhr=fhr+1"
typeset -Z2 fhr
done

Files_List=`cat $DATA/files_list`
Index_List=`cat index_list`

#-----------------------------------------------------------------------
# Create namelist ==> "filenames", "userdefs", "windowdefs"
#-----------------------------------------------------------------------

MACHTYPE=`uname`
if [[ $MACHTYPE = "AIX" ]]; then
  Marker="/"
else
  Marker="&END"
fi
cat > $DATA/namelist.${PROG} << EOF05

 &FILENAMES
  file_gd    = "$FILE_GD"
  files_in   = $Files_List
  index_in   = $Index_List
  makegrid   = .${MKGRID}.
  makeemis   = .${MKEMIS}.
  makebc     = .${MKBC}.
 $Marker

 &USERDEFS
  aqf_start  = "$AQF_START"
  aqf_end    = "$AQF_END"
  intvl      =  $INTVL
  iwind      =  $IWIND
  vgtop_gd   =  $VGTOP_GD
  coordnam   = "$CoordName"
  grdnam     = "$GridName"
  eqsigma    =  $EQSIGMA
  ctmlays    =  $CTMLAYS
  btrim      =  $BTRIM
  metvert    =  $METVERT
  neta1      =  $NETA1
  lprt_col   =  $LPRT_COL
  lprt_row   =  $LPRT_ROW
 $Marker

 &WINDOWDEFS
  x0         =  $X0
  y0         =  $Y0
  ncolsin    =  $NCOLS
  nrowsin    =  $NROWS
 $Marker

EOF05

#-----------------------------------------------------------------------
# Set links to FORTRAN units.
#-----------------------------------------------------------------------

rm -f fort.*
ln -s -f $FILE_GD                   fort.4
ln -s -f ./namelist.${PROG}         fort.8

integer NUMFIL=0
for fil in $InMetFiles; do
  ((NN = NUMFIL + 10))
  ln -s -f $fil fort.$NN
  ((NUMFIL = NUMFIL + 1))
done

#---------------------------------------------------------------------
# Set output file names and other miscellaneous environment variables.
#---------------------------------------------------------------------

export IOAPI_CHECK_HEADERS=F
export EXECUTION_ID=PREMAQ
export NOTCDF_FATAL=F
export BNDY_GASC_1=$FIXaqm/HI_80X52_mean_2002${SMM}_GEOSCHEM-35L-tracer.nmmb.ncf
if [[ $MKGRID = "T" ]]; then
  export GRID_BDY_2D_G1=$DATA/GRIDBDY2D
  export GRID_BDY_3D_G1=$DATA/GRIDBDY3D
  export GRID_CRO_2D_G1=$DATA/GRIDCRO2D
  export GRID_CRO_3D_G1=$DATA/GRIDCRO3D
  export GRID_DOT_2D_G1=$DATA/GRIDDOT2D
fi
export MET_BDY_2D_G1=$DATA/METBDY2D
export MET_BDY_3D_G1=$DATA/METBDY3D
export MET_CRO_2D_G1=$DATA/METCRO2D
export MET_CRO_3D_G1=$DATA/METCRO3D
export MET_DOT_3D_G1=$DATA/METDOT3D
#export CHEM_BDY_3D_G1=$DATA/CHEMBDY3D
#export CHEM_CRO_3D_G1=$DATA/CHEMCRO3D

#---------------------------------------------------------------------
# Set input file names.
#---------------------------------------------------------------------
export LANDA_G1=$FIXaqm/aqm_LANDA_${OUTGRID}_new.ncf
if [[ $MKBC = "T" ]]; then
export BNDY_GASC_1=$FIXaqm/HI_80X52_mean_2002${SMM}_GEOSCHEM-35L-tracer.nmmb.ncf
fi

#---------------------------------------------------------------------
# Set BEIS311 environment variables and file names.
#---------------------------------------------------------------------

export SOILOUT_TIME=${soilhr}
export PROMPTFLAG=F
export BIOSW_YN=N
export SUMMER_YN=Y
export B3GRD=$FIXaqm/aqm_static_b3grd_${OUTGRID}.ncf
export GSPRO=$FIXaqm/aqm_static_gspro_cb05
export B3GTS_L=$DATA/aqm_b3gts_l.${PDY}.${OUTGRID}.ncf
export SOILINP=$DATA/soilinp.${PDY}.${OUTGRID}.ncf
export SOILOUT=$DATA/soilout.${PDY}.${OUTGRID}.ncf

#---------------------------------------------------------------------
# Set laypoint environment variables and file names.
#
# Note: Program aborts before reaching here for non-defined layers
#---------------------------------------------------------------------

export SMK_SOURCE='P'

if [ $NLAYS = 22 ]; then
   export SMK_EMLAYS=15
   export REP_LAYER_MAX=15
elif [ $NLAYS = 29 ]; then
   export SMK_EMLAYS=19
   export REP_LAYER_MAX=19
elif [ $NLAYS = 33 ]; then
   export SMK_EMLAYS=19
   export REP_LAYER_MAX=19 
elif [ $NLAYS = 35 ]; then
   export SMK_EMLAYS=20
   export REP_LAYER_MAX=20     
elif [ $NLAYS = 42 ]; then
   export SMK_EMLAYS=29
   export REP_LAYER_MAX=29   
elif [ $NLAYS = 56 ]; then
   export SMK_EMLAYS=34
   export REP_LAYER_MAX=34
elif [ $NLAYS = 60 ]; then
   export SMK_EMLAYS=34
   export REP_LAYER_MAX=34
fi

export SMK_SPECELEV_YN=N
export HOUR_PLUMEDATA_YN=N
export VELOC_RECALC=N
export IOAPI_ISPH=19
export INSPH_CODE=19
export OUTZONE=0
export UNIFORM_TPROF_YN=N
export DAY_SPECIFIC_YN=N
export HOUR_SPECIFIC_YN=N
export SMK_AVEDAY_YN=N
export RENORM_TRPOF=T
export REPORT_DEFAULTS=N
export ZONE4WM=T
export OUTPUT='.'


export PNTS=$INPPLTDRY/pnts.map.txt
export INVNAME1=pnts
export INVNAME2=psrc
export INVTABLE=$FIXaqm/aqm_static_invtable.criteria.nospec.txt

export PLAY=$DATA/play.${PDY}.1.aqf12_nei1aqf99.ncf
rm -f $DATA/play.${PDY}.1.aqf12_nei1aqf99.ncf

#---------------------------------------------------------------------
# Set smkmerge environment variables and file names.
#---------------------------------------------------------------------

export MRG_SOURCE='P'
export MRG_CTLMAT_MULT=' '
export MRG_CTLMAT_ADD=' '
export MRG_CTLMAT_REAC=' '
export MRG_TEMPORAL_YN=Y
export MRG_SPCMAT_YN=Y
export MRG_METCHK_YN=Y
export MRG_MARKETPEN_YN=N
export MRG_GRDOUT_YN=Y
export MRG_REPSTA_YN=N
export MRG_REPCNY_YN=N
export MRG_REPINV_YN=Y
export MRG_REPSPC_YN=Y
export MRG_REPCTL_YN=Y
export MRG_LAYERS_YN=Y
export SMK_PING_METHOD=0
export SMK_ASCIIELEV_YN=N
export EXPLICIT_PLUMES_YN=N
export SMK_O3SEASON_YN=Y
export SMK_DEFAULT_TZONE=5
export MRG_BYDAY=' '
export PTREF=$FIXaqm/aqm_static_ptref.m3.us+can.txt          
export PTPRO=$FIXaqm/aqm_static_ptpro.m3.default.us+can.txt  
export HOLIDAYS=$FIXaqm/aqm_static_holidays.txt


#export PGMAT=$INPPLTDRY/aqm_static_pgmat_${OUTGRID}_${SYYYY}.ncf
export PGMAT=$INPPLTDRY/aqm_static_pgmat_${OUTGRID}.ncf
export PSMAT=$INPPLTDRY/aqm_static_psmat_${GAS_CHEM}.ncf
export COSTCY=$FIXaqm/costcy_for_2002_19dec2007_v1.txt

export ESCEN='nei1aqf99'

export MRG_GRDOUT_UNIT='mole/s'
export MRG_TOTOUT_UNIT='mole/s'
export PGTS3D_L=$DATA/pgts3d_l.${PDY}.1.aqf12.nei1aqf99.binaqm_static_costcy

rm -f $DATA/pgts3d_l.${PDY}.1.aqf12.nei1aqf99.binaqm_static_costcy
#---------------------------------------------------------------------
# Set mobile source processing variables.
#---------------------------------------------------------------------
export COEFS_EVAPEXH=$INPPLTDRY/aqm_static_coef_evapexh.cb05.${OUTGRID}.ncf
export MGTS_L=$DATA/aqm_mgts_l.${PDY}.${OUTGRID}.ncf
export LOOKUP_PM=$INPPLTDRY/aqm_lookup_table.${OUTGRID}.ncf

#if [ ${cycle} = 't00z' -o ${cycle} = 't06z' ]; then
#   export AGTS_L=$INPPLTDR/aqm_pollutant_${GAS_CHEM}_${PDYm1}_agts_${INV_BS}.${OUTGRID}.ncf
#   export CGTS_L=$INPPLTDR/aqm_pollutant_${GAS_CHEM}_${PDYm1}_mgts_${INV_BS}.${OUTGRID}.ncf
#elif [ ${cycle} = 't12z' -o ${cycle} = 't18z' ]; then
   export AGTS_L=$INPPLTDR/aqm_pollutant_${GAS_CHEM}_${SYYYY}${SMM}_agts_${INV_BS}.${OUTGRID}.ncf
   export CGTS_L=$INPPLTDR/aqm_pollutant_${GAS_CHEM}_${SYYYY}${SMM}_mgts_${INV_BS}.${OUTGRID}.ncf
#fi

if [ !  -s "$AGTS_L" -o  ! -s "$CGTS_L" ]; then
  echo "*****FATAL ERROR***** - anthropogenic emission files are missing"
  postmsg "$jlogfile" "*****FATAL ERROR***** - anthropogenic emission files are missing"
  err_exit 1
else
  echo " anthropogenic emission files are available"
fi

export LOGFILE=chkreads.log   # we have to delay to set log file to avoid from the conflict of chgsdate

rm -f $LOGFILE

#---------------------------------------------------------------------
# Set mrggid processing variables.
#---------------------------------------------------------------------

export FILELIST=$DATA/filelist.aqf
if [ -f $FILELIST ]; then
  rm -f $FILELIST
fi

if [ $MBL_T = "F" ]; then
  echo 'AGTS_L'   >> $FILELIST
  echo 'B3GTS_L'  >> $FILELIST
  echo 'PGTS3D_L' >> $FILELIST
  echo 'CGTS_L'  >> $FILELIST # No need MGTS_L since no Temp dependence
else
  echo 'AGTS_L'   >> $FILELIST
  echo 'B3GTS_L'  >> $FILELIST
  echo 'PGTS3D_L' >> $FILELIST
  echo 'MGTS_L'  >> $FILELIST   
  echo 'CGTS_L'  >> $FILELIST
fi

export OUTFILE=$DATA/emission.${PDY}.m6.ncf

#---------------------------------------------------------------------
# Execute PREMAQ.
#---------------------------------------------------------------------
##. prep_step

msg="jphuang 33"
postmsg "$jlogfile1" "$msg"

startmsg
$EXECaqm/aqm_premaq_v502  >> $pgmout 2>errfile
export err=$?;err_chk

let "soilhr=soilhr-1"
typeset -Z2 soilhr

if [ "$SENDCOM" = 'YES' ]; then
    cp $DATA/aqm.${cycle}.nmm00.tm00 $COMOUT/aqm.${cycle}.nmm00.tm00
    cp $DATA/aqm.${cycle}.nmm06.tm00 $COMOUT/aqm.${cycle}.nmm06.tm00
    mv $DATA/GRIDDESC  $COMOUT/aqm_griddesc05
    mv $DATA/GRIDCRO2D $COMOUT/aqm.${cycle}.grdcro2d.ncf
    mv $DATA/GRIDDOT2D $COMOUT/aqm.${cycle}.grddot2d.ncf

    mv $DATA/METBDY3D $COMOUT/aqm.${cycle}.metbdy3d.ncf
    mv $DATA/METCRO2D $COMOUT/aqm.${cycle}.metcro2d.ncf
    mv $DATA/METCRO3D $COMOUT/aqm.${cycle}.metcro3d.ncf
    mv $DATA/METDOT3D $COMOUT/aqm.${cycle}.metdot3d.ncf

    mv $DATA/emission.${PDY}.m6.ncf            $COMOUT/aqm.${cycle}.emission.ncf

    $FSYNC $COMOUT/aqm.${cycle}.grdcro2d.ncf  # synchronize the nodes
    $FSYNC $COMOUT/aqm.${cycle}.grddot2d.ncf
    $FSYNC $COMOUT/aqm.${cycle}.metcro2d.ncf
    $FSYNC $COMOUT/aqm.${cycle}.metcro3d.ncf
    $FSYNC $COMOUT/aqm.${cycle}.metdot3d.ncf
    $FSYNC $COMOUT/aqm.${cycle}.metbdy3d.ncf
    $FSYNC $COMOUT/aqm.${cycle}.emission.ncf

fi

cd $DATA

#setup.sh

rm -rf $DATA/chkreads.log

##export LOGFILE=$DATA/chkreads.log

##$USHaqm/aqm_premaq_cb05_winddust_snowcover_hms_emission_cs.sh
##export err=$?; err_chk
#######################################################
#if [[  ${cycle} = 't06z'  ]] ; then
#$USHaqm/aqm_ngac_conus_L35_dust.sh $PDY
#export err=$?; err_chk
#fi

########################################################
msg='ENDED NORMALLY.'
postmsg "$jlogfile" "$msg"

################## END OF SCRIPT #######################
